#!/usr/bin/env node

/**AUTOR:
 * Nombre: Andres Felipe Franco Tellez
 * Codigo: 20221978031
 * Repositorio: https://github.com/ItsFranco666/Proyecto2_CRUD_Node_MongoDB.git */

/** Dependencias de modulos. */
var app = require('../app');
var debug = require('debug')('proyecto-2-nodejs-y-mongodb:server');
var http = require('http');

/** Obtener puerto delentorno y guardarlo en express */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/** Crear servidor HTTP */
var server = http.createServer(app);

/** Iniciar servidor HTTP */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.debug('Aplicación funcionando en http://localhost:' + port);

/** Normalizar un puerto en un número, cadena o falso */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/** Event listener del servidor HTTP evento "error" */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Maneja errores de escucha específicos con mensajes amigables
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/** Event listener del servidor HTTP evento "listening" */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
